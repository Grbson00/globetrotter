// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: accommodation.proto

package pb

import (
	context "context"
	"log"

	"github.com/rruzicic/globetrotter/bnb/accommodation-service/repos"
	grpc "google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccommodationServiceClient is the client API for AccommodationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccommodationServiceClient interface {
	GetAccommodationById(ctx context.Context, in *RequestAccommodationById, opts ...grpc.CallOption) (*Accommodation, error)
}

type accommodationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccommodationServiceClient(cc grpc.ClientConnInterface) AccommodationServiceClient {
	return &accommodationServiceClient{cc}
}

func (c *accommodationServiceClient) GetAccommodationById(ctx context.Context, in *RequestAccommodationById, opts ...grpc.CallOption) (*Accommodation, error) {
	out := new(Accommodation)
	err := c.cc.Invoke(ctx, "/pb.AccommodationService/GetAccommodationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccommodationServiceServer is the server API for AccommodationService service.
// All implementations must embed UnimplementedAccommodationServiceServer
// for forward compatibility
type AccommodationServiceServer interface {
	GetAccommodationById(context.Context, *RequestAccommodationById) (*Accommodation, error)
	mustEmbedUnimplementedAccommodationServiceServer()
}

// UnimplementedAccommodationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccommodationServiceServer struct {
}

func (UnimplementedAccommodationServiceServer) GetAccommodationById(ctx context.Context, req *RequestAccommodationById) (*Accommodation, error) {
	accommodation, err := repos.GetAccommodationById(req.GetId())
	if err != nil {
		log.Panic("Could not get accommodation with id", req.GetId())
	}

	var reservation_ids []string
	for _, id := range accommodation.Reservations {
		reservation_ids = append(reservation_ids, id.Hex())
	}

	var commodations []string
	for _, commodation := range accommodation.AvailableCommodations {
		commodations = append(commodations, string(commodation))
	}

	grpc_accommodation := Accommodation {
		Reservations: reservation_ids,
		Name: accommodation.Name,
		Country: accommodation.Location.Country,
		Street: accommodation.Location.Street,
		StreetNum: accommodation.Location.StreetNum,
		ZipCode: int32(accommodation.Location.ZIPCode),
		Commodations: commodations,
		Photos: accommodation.Photos,
		Guests: int32(accommodation.Guests),
		AvailabilityStartDate: timestamppb.New(accommodation.Availability.Start),
		AvailabilityEndDate: timestamppb.New(accommodation.Availability.End),
		UnitPrice: accommodation.UnitPrice,
		PriceForPerson: accommodation.PriceForPerson,
		User: accommodation.User.Hex(),
		AutoApprove: accommodation.AutoApprove,
	}

	return &grpc_accommodation, nil
}
func (UnimplementedAccommodationServiceServer) mustEmbedUnimplementedAccommodationServiceServer() {}

// UnsafeAccommodationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccommodationServiceServer will
// result in compilation errors.
type UnsafeAccommodationServiceServer interface {
	mustEmbedUnimplementedAccommodationServiceServer()
}

func RegisterAccommodationServiceServer(s grpc.ServiceRegistrar, srv AccommodationServiceServer) {
	s.RegisterService(&AccommodationService_ServiceDesc, srv)
}

func _AccommodationService_GetAccommodationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccommodationById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAccommodationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AccommodationService/GetAccommodationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAccommodationById(ctx, req.(*RequestAccommodationById))
	}
	return interceptor(ctx, in, info, handler)
}

// AccommodationService_ServiceDesc is the grpc.ServiceDesc for AccommodationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccommodationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AccommodationService",
	HandlerType: (*AccommodationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccommodationById",
			Handler:    _AccommodationService_GetAccommodationById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accommodation.proto",
}
